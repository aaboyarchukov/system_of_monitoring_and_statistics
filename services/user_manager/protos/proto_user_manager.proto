syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/struct.proto";

option go_package = "system_of_monitoring_and_statistics/services/user_manager/gen;user_manager_v1";

service UserManager {
    rpc GetUserProfile(GetUserProfileRequest) returns (UserProfile) {
        option (google.api.http) = {
            get: "/get_profile/{player_id}"
        };
    }

    rpc GetUserMatchesStatistic(GetUserMatchesStatisticRequest) returns (MatchesStatistic) {
        option (google.api.http) = {
            post: "/get_user_matches_statistic",
            body: "*"
        };
    }

    rpc GetMatchStatistic(GetMatchStatisticRequest) returns (MatchStatistic) {
        option (google.api.http) = {
            post: "/get_match_statistic",
            body: "*"
        };
    }

    rpc GetMeasurementsFields(GetMeasurementsFieldsRequest) returns (MeasurementsFieldsResponse) {
        option (google.api.http) = {
            post: "/get_measurements_fields",
            body: "*"
        };
    }

    rpc GetPlayerTeams(GetPlayerTeamsRequest) returns (PlayerTeams) {
        option (google.api.http) = {
            get: "/get_player_teams/{player_id}"
        };
    }

    rpc GetLeaguesTours(GetLeaguesToursRequest) returns (LeaguesTours) {
        option (google.api.http) = {
            post: "/get_leagues_tours",
            body: "*"
        };
    }

    rpc GetTourGroups(GetTourGroupsRequest) returns (TourGroups) {
        option (google.api.http) = {
            post: "/get_tour_groups",
            body: "*"
        };
    }

    // return leagues wich are belongs to sport type
    rpc GetLeaguesBelongsToSportType(GetLeagues) returns (SportTypeLeagues) {
        option (google.api.http) = {
            get: "/get_leagues/{league_id}"
        };
    }


    rpc GetLeagueSchedule(GetLeagueScheduleRequest) returns (MatchesStatistic) {
        option (google.api.http) = {
            post: "/get_league_schedule",
            body: "*"
        };
    }

    rpc GetTourStanding(GetTourStandingRequest) returns (TourStanding) {
        option (google.api.http) = {
            post: "/get_league_standing",
            body: "*"
        };
    }
}

message GetUserProfileRequest {
    int64 player_id = 1;
};

message UserProfile {
    string email = 1;   
    string name = 2;
    string surname = 3;
    string sex = 4;
    int64 height = 5;    
    int64 weight = 6;
    int64 date_birth_ms = 7;
    string photo_url = 8;
};

message GetUserStatisticRequest {
    int64 user_id = 1;
    int64 sport_type_id = 2;
    int64 legue_id = 3;
};

message GetUserMatchesStatisticRequest {
    int64 user_id = 1;
    int64 team_id = 2;
    int64 tour_id = 3;
};

message MatchesStatistic {
    repeated Match matches_stats = 1;
};

message GetMatchStatisticRequest {
    int64 match_id = 1;
};

message MeasurementsFields {
    string key = 1;
    string label = 2;
};

message MatchStatistic {
    repeated MeasurementsFields statistic_measurements = 1;
    TeamStatistic home_team_statistic = 2;
    TeamStatistic away_team_statistic = 3;
};

message TeamStatistic {
    string name = 1;
    int64 score = 2;

    // include game number and name of player
    // with fields: game_number and name accordingly
    repeated google.protobuf.Struct players_stats = 3;
};

message GetTourStandingRequest {
    int64 tour_id = 1;
    int64 group_id = 2;
};

message TourStanding {
    repeated GroupStanding group_standing = 1;
};

message GetLeagueScheduleRequest {
    int64 tour_id = 1;
};

message Match {
    int64 match_id = 1;
    string home_team = 2;
    int64 home_team_score = 3;
    string away_team = 4;
    int64 away_team_score = 5;
    string round = 6;
    int64 date_ms = 7;
};

message GroupStanding {
    string group = 1;

    // ATTENTION: need to get sorted list teams according to
    // wins, looses, points diff
    repeated Team teams = 2;
};

message Team {
    int64 id = 1;
    string name = 2;
    int64 total_wins = 3;
    int64 total_looses = 4;
    int64 total_points_diff = 5;
};

message GetMeasurementsFieldsRequest {
    int64 sport_type_id = 1;
};

message MeasurementsFieldsResponse {
    repeated MeasurementsFields statistic_measurements = 1;
};

message GetPlayerTeamsRequest {
    int64 player_id = 1;
};

message PlayerTeams {
    repeated Team player_teams = 1;
};

message GetLeaguesToursRequest {
    int64 league_id = 1;
};

message LeaguesTours {
    repeated Tour leagues_tours = 1;
};

message Tour {
    int64 id = 1;
    string name = 2; 
};

message GetTourGroupsRequest {
    int64 tour_id = 1;
};


message TourGroups {
    repeated Group tour_groups = 1;
};

message Group {
    int64 id = 1;
    string name = 2;
};

message GetLeagues {
    int64 league_id = 1;
};

message SportTypeLeagues {
    repeated League leagues = 1;
};

message League {
    int64 id = 1;
    string name = 2;
};