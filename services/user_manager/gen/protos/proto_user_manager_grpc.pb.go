// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: protos/proto_user_manager.proto

package user_manager_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserManager_GetUserProfile_FullMethodName          = "/UserManager/GetUserProfile"
	UserManager_GetUserStatistic_FullMethodName        = "/UserManager/GetUserStatistic"
	UserManager_GetUserMatchesStatistic_FullMethodName = "/UserManager/GetUserMatchesStatistic"
	UserManager_GetLeagueSchedule_FullMethodName       = "/UserManager/GetLeagueSchedule"
	UserManager_GetLeagueStanding_FullMethodName       = "/UserManager/GetLeagueStanding"
)

// UserManagerClient is the client API for UserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerClient interface {
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*UserProfile, error)
	GetUserStatistic(ctx context.Context, in *GetUserStatisticRequest, opts ...grpc.CallOption) (*UserStatistic, error)
	GetUserMatchesStatistic(ctx context.Context, in *GetUserStatisticRequest, opts ...grpc.CallOption) (*UserMatchesStatistic, error)
	GetLeagueSchedule(ctx context.Context, in *GetLeagueScheduleRequest, opts ...grpc.CallOption) (*LeagueSchedule, error)
	GetLeagueStanding(ctx context.Context, in *GetLeagueStandingRequest, opts ...grpc.CallOption) (*LeagueStanding, error)
}

type userManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerClient(cc grpc.ClientConnInterface) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*UserProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProfile)
	err := c.cc.Invoke(ctx, UserManager_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetUserStatistic(ctx context.Context, in *GetUserStatisticRequest, opts ...grpc.CallOption) (*UserStatistic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStatistic)
	err := c.cc.Invoke(ctx, UserManager_GetUserStatistic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetUserMatchesStatistic(ctx context.Context, in *GetUserStatisticRequest, opts ...grpc.CallOption) (*UserMatchesStatistic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserMatchesStatistic)
	err := c.cc.Invoke(ctx, UserManager_GetUserMatchesStatistic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetLeagueSchedule(ctx context.Context, in *GetLeagueScheduleRequest, opts ...grpc.CallOption) (*LeagueSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeagueSchedule)
	err := c.cc.Invoke(ctx, UserManager_GetLeagueSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetLeagueStanding(ctx context.Context, in *GetLeagueStandingRequest, opts ...grpc.CallOption) (*LeagueStanding, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeagueStanding)
	err := c.cc.Invoke(ctx, UserManager_GetLeagueStanding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServer is the server API for UserManager service.
// All implementations must embed UnimplementedUserManagerServer
// for forward compatibility.
type UserManagerServer interface {
	GetUserProfile(context.Context, *GetUserProfileRequest) (*UserProfile, error)
	GetUserStatistic(context.Context, *GetUserStatisticRequest) (*UserStatistic, error)
	GetUserMatchesStatistic(context.Context, *GetUserStatisticRequest) (*UserMatchesStatistic, error)
	GetLeagueSchedule(context.Context, *GetLeagueScheduleRequest) (*LeagueSchedule, error)
	GetLeagueStanding(context.Context, *GetLeagueStandingRequest) (*LeagueStanding, error)
	mustEmbedUnimplementedUserManagerServer()
}

// UnimplementedUserManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserManagerServer struct{}

func (UnimplementedUserManagerServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*UserProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserManagerServer) GetUserStatistic(context.Context, *GetUserStatisticRequest) (*UserStatistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatistic not implemented")
}
func (UnimplementedUserManagerServer) GetUserMatchesStatistic(context.Context, *GetUserStatisticRequest) (*UserMatchesStatistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMatchesStatistic not implemented")
}
func (UnimplementedUserManagerServer) GetLeagueSchedule(context.Context, *GetLeagueScheduleRequest) (*LeagueSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeagueSchedule not implemented")
}
func (UnimplementedUserManagerServer) GetLeagueStanding(context.Context, *GetLeagueStandingRequest) (*LeagueStanding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeagueStanding not implemented")
}
func (UnimplementedUserManagerServer) mustEmbedUnimplementedUserManagerServer() {}
func (UnimplementedUserManagerServer) testEmbeddedByValue()                     {}

// UnsafeUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServer will
// result in compilation errors.
type UnsafeUserManagerServer interface {
	mustEmbedUnimplementedUserManagerServer()
}

func RegisterUserManagerServer(s grpc.ServiceRegistrar, srv UserManagerServer) {
	// If the following call pancis, it indicates UnimplementedUserManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserManager_ServiceDesc, srv)
}

func _UserManager_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManager_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetUserStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetUserStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManager_GetUserStatistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetUserStatistic(ctx, req.(*GetUserStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetUserMatchesStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetUserMatchesStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManager_GetUserMatchesStatistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetUserMatchesStatistic(ctx, req.(*GetUserStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetLeagueSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeagueScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetLeagueSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManager_GetLeagueSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetLeagueSchedule(ctx, req.(*GetLeagueScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetLeagueStanding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeagueStandingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetLeagueStanding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManager_GetLeagueStanding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetLeagueStanding(ctx, req.(*GetLeagueStandingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManager_ServiceDesc is the grpc.ServiceDesc for UserManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserProfile",
			Handler:    _UserManager_GetUserProfile_Handler,
		},
		{
			MethodName: "GetUserStatistic",
			Handler:    _UserManager_GetUserStatistic_Handler,
		},
		{
			MethodName: "GetUserMatchesStatistic",
			Handler:    _UserManager_GetUserMatchesStatistic_Handler,
		},
		{
			MethodName: "GetLeagueSchedule",
			Handler:    _UserManager_GetLeagueSchedule_Handler,
		},
		{
			MethodName: "GetLeagueStanding",
			Handler:    _UserManager_GetLeagueStanding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/proto_user_manager.proto",
}
